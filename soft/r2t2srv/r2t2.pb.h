// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: r2t2.proto

#ifndef PROTOBUF_r2t2_2eproto__INCLUDED
#define PROTOBUF_r2t2_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace R2T2Proto {
class R2T2Message;
class R2T2MessageDefaultTypeInternal;
extern R2T2MessageDefaultTypeInternal _R2T2Message_default_instance_;
class R2T2Message_Gain;
class R2T2Message_GainDefaultTypeInternal;
extern R2T2Message_GainDefaultTypeInternal _R2T2Message_Gain_default_instance_;
}  // namespace R2T2Proto

namespace R2T2Proto {

namespace protobuf_r2t2_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_r2t2_2eproto

enum R2T2Message_Command {
  R2T2Message_Command_NONE = 0,
  R2T2Message_Command_RXOPEN = 1,
  R2T2Message_Command_TXOPEN = 2,
  R2T2Message_Command_CLOSE = 4,
  R2T2Message_Command_STARTAUDIO = 5,
  R2T2Message_Command_STOPAUDIO = 6,
  R2T2Message_Command_STARTFFT = 7,
  R2T2Message_Command_STOPFFT = 8,
  R2T2Message_Command_REQFFT = 9,
  R2T2Message_Command_REINIT = 10,
  R2T2Message_Command_ACK = 11,
  R2T2Message_Command_NACK = 12,
  R2T2Message_Command_TIMEOUT = 13,
  R2T2Message_Command_ALIVE = 14
};
bool R2T2Message_Command_IsValid(int value);
const R2T2Message_Command R2T2Message_Command_Command_MIN = R2T2Message_Command_NONE;
const R2T2Message_Command R2T2Message_Command_Command_MAX = R2T2Message_Command_ALIVE;
const int R2T2Message_Command_Command_ARRAYSIZE = R2T2Message_Command_Command_MAX + 1;

const ::google::protobuf::EnumDescriptor* R2T2Message_Command_descriptor();
inline const ::std::string& R2T2Message_Command_Name(R2T2Message_Command value) {
  return ::google::protobuf::internal::NameOfEnum(
    R2T2Message_Command_descriptor(), value);
}
inline bool R2T2Message_Command_Parse(
    const ::std::string& name, R2T2Message_Command* value) {
  return ::google::protobuf::internal::ParseNamedEnum<R2T2Message_Command>(
    R2T2Message_Command_descriptor(), name, value);
}
// ===================================================================

class R2T2Message_Gain : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:R2T2Proto.R2T2Message.Gain) */ {
 public:
  R2T2Message_Gain();
  virtual ~R2T2Message_Gain();

  R2T2Message_Gain(const R2T2Message_Gain& from);

  inline R2T2Message_Gain& operator=(const R2T2Message_Gain& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const R2T2Message_Gain& default_instance();

  static inline const R2T2Message_Gain* internal_default_instance() {
    return reinterpret_cast<const R2T2Message_Gain*>(
               &_R2T2Message_Gain_default_instance_);
  }

  void Swap(R2T2Message_Gain* other);

  // implements Message ----------------------------------------------

  inline R2T2Message_Gain* New() const PROTOBUF_FINAL { return New(NULL); }

  R2T2Message_Gain* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const R2T2Message_Gain& from);
  void MergeFrom(const R2T2Message_Gain& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(R2T2Message_Gain* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 adc = 1;
  bool has_adc() const;
  void clear_adc();
  static const int kAdcFieldNumber = 1;
  ::google::protobuf::uint32 adc() const;
  void set_adc(::google::protobuf::uint32 value);

  // required sint32 gain = 2;
  bool has_gain() const;
  void clear_gain();
  static const int kGainFieldNumber = 2;
  ::google::protobuf::int32 gain() const;
  void set_gain(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:R2T2Proto.R2T2Message.Gain)
 private:
  void set_has_adc();
  void clear_has_adc();
  void set_has_gain();
  void clear_has_gain();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 adc_;
  ::google::protobuf::int32 gain_;
  friend struct  protobuf_r2t2_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class R2T2Message : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:R2T2Proto.R2T2Message) */ {
 public:
  R2T2Message();
  virtual ~R2T2Message();

  R2T2Message(const R2T2Message& from);

  inline R2T2Message& operator=(const R2T2Message& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const R2T2Message& default_instance();

  static inline const R2T2Message* internal_default_instance() {
    return reinterpret_cast<const R2T2Message*>(
               &_R2T2Message_default_instance_);
  }

  void Swap(R2T2Message* other);

  // implements Message ----------------------------------------------

  inline R2T2Message* New() const PROTOBUF_FINAL { return New(NULL); }

  R2T2Message* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const R2T2Message& from);
  void MergeFrom(const R2T2Message& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(R2T2Message* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef R2T2Message_Gain Gain;

  typedef R2T2Message_Command Command;
  static const Command NONE =
    R2T2Message_Command_NONE;
  static const Command RXOPEN =
    R2T2Message_Command_RXOPEN;
  static const Command TXOPEN =
    R2T2Message_Command_TXOPEN;
  static const Command CLOSE =
    R2T2Message_Command_CLOSE;
  static const Command STARTAUDIO =
    R2T2Message_Command_STARTAUDIO;
  static const Command STOPAUDIO =
    R2T2Message_Command_STOPAUDIO;
  static const Command STARTFFT =
    R2T2Message_Command_STARTFFT;
  static const Command STOPFFT =
    R2T2Message_Command_STOPFFT;
  static const Command REQFFT =
    R2T2Message_Command_REQFFT;
  static const Command REINIT =
    R2T2Message_Command_REINIT;
  static const Command ACK =
    R2T2Message_Command_ACK;
  static const Command NACK =
    R2T2Message_Command_NACK;
  static const Command TIMEOUT =
    R2T2Message_Command_TIMEOUT;
  static const Command ALIVE =
    R2T2Message_Command_ALIVE;
  static inline bool Command_IsValid(int value) {
    return R2T2Message_Command_IsValid(value);
  }
  static const Command Command_MIN =
    R2T2Message_Command_Command_MIN;
  static const Command Command_MAX =
    R2T2Message_Command_Command_MAX;
  static const int Command_ARRAYSIZE =
    R2T2Message_Command_Command_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Command_descriptor() {
    return R2T2Message_Command_descriptor();
  }
  static inline const ::std::string& Command_Name(Command value) {
    return R2T2Message_Command_Name(value);
  }
  static inline bool Command_Parse(const ::std::string& name,
      Command* value) {
    return R2T2Message_Command_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional bytes rxData = 2;
  bool has_rxdata() const;
  void clear_rxdata();
  static const int kRxDataFieldNumber = 2;
  const ::std::string& rxdata() const;
  void set_rxdata(const ::std::string& value);
  #if LANG_CXX11
  void set_rxdata(::std::string&& value);
  #endif
  void set_rxdata(const char* value);
  void set_rxdata(const void* value, size_t size);
  ::std::string* mutable_rxdata();
  ::std::string* release_rxdata();
  void set_allocated_rxdata(::std::string* rxdata);

  // optional bytes txData = 3;
  bool has_txdata() const;
  void clear_txdata();
  static const int kTxDataFieldNumber = 3;
  const ::std::string& txdata() const;
  void set_txdata(const ::std::string& value);
  #if LANG_CXX11
  void set_txdata(::std::string&& value);
  #endif
  void set_txdata(const char* value);
  void set_txdata(const void* value, size_t size);
  ::std::string* mutable_txdata();
  ::std::string* release_txdata();
  void set_allocated_txdata(::std::string* txdata);

  // optional bytes fftData = 4;
  bool has_fftdata() const;
  void clear_fftdata();
  static const int kFftDataFieldNumber = 4;
  const ::std::string& fftdata() const;
  void set_fftdata(const ::std::string& value);
  #if LANG_CXX11
  void set_fftdata(::std::string&& value);
  #endif
  void set_fftdata(const char* value);
  void set_fftdata(const void* value, size_t size);
  ::std::string* mutable_fftdata();
  ::std::string* release_fftdata();
  void set_allocated_fftdata(::std::string* fftdata);

  // optional .R2T2Proto.R2T2Message.Gain gain = 40;
  bool has_gain() const;
  void clear_gain();
  static const int kGainFieldNumber = 40;
  const ::R2T2Proto::R2T2Message_Gain& gain() const;
  ::R2T2Proto::R2T2Message_Gain* mutable_gain();
  ::R2T2Proto::R2T2Message_Gain* release_gain();
  void set_allocated_gain(::R2T2Proto::R2T2Message_Gain* gain);

  // optional .R2T2Proto.R2T2Message.Gain att = 41;
  bool has_att() const;
  void clear_att();
  static const int kAttFieldNumber = 41;
  const ::R2T2Proto::R2T2Message_Gain& att() const;
  ::R2T2Proto::R2T2Message_Gain* mutable_att();
  ::R2T2Proto::R2T2Message_Gain* release_att();
  void set_allocated_att(::R2T2Proto::R2T2Message_Gain* att);

  // optional .R2T2Proto.R2T2Message.Command command = 1;
  bool has_command() const;
  void clear_command();
  static const int kCommandFieldNumber = 1;
  ::R2T2Proto::R2T2Message_Command command() const;
  void set_command(::R2T2Proto::R2T2Message_Command value);

  // optional uint32 txDataAck = 10;
  bool has_txdataack() const;
  void clear_txdataack();
  static const int kTxDataAckFieldNumber = 10;
  ::google::protobuf::uint32 txdataack() const;
  void set_txdataack(::google::protobuf::uint32 value);

  // optional uint64 rxFreq = 20;
  bool has_rxfreq() const;
  void clear_rxfreq();
  static const int kRxFreqFieldNumber = 20;
  ::google::protobuf::uint64 rxfreq() const;
  void set_rxfreq(::google::protobuf::uint64 value);

  // optional uint64 txFreq = 21;
  bool has_txfreq() const;
  void clear_txfreq();
  static const int kTxFreqFieldNumber = 21;
  ::google::protobuf::uint64 txfreq() const;
  void set_txfreq(::google::protobuf::uint64 value);

  // optional uint32 txRate = 22;
  bool has_txrate() const;
  void clear_txrate();
  static const int kTxRateFieldNumber = 22;
  ::google::protobuf::uint32 txrate() const;
  void set_txrate(::google::protobuf::uint32 value);

  // optional uint32 rxRate = 23;
  bool has_rxrate() const;
  void clear_rxrate();
  static const int kRxRateFieldNumber = 23;
  ::google::protobuf::uint32 rxrate() const;
  void set_rxrate(::google::protobuf::uint32 value);

  // optional uint32 fftRate = 24;
  bool has_fftrate() const;
  void clear_fftrate();
  static const int kFftRateFieldNumber = 24;
  ::google::protobuf::uint32 fftrate() const;
  void set_fftrate(::google::protobuf::uint32 value);

  // optional uint32 fftSize = 25;
  bool has_fftsize() const;
  void clear_fftsize();
  static const int kFftSizeFieldNumber = 25;
  ::google::protobuf::uint32 fftsize() const;
  void set_fftsize(::google::protobuf::uint32 value);

  // optional uint32 rx = 30;
  bool has_rx() const;
  void clear_rx();
  static const int kRxFieldNumber = 30;
  ::google::protobuf::uint32 rx() const;
  void set_rx(::google::protobuf::uint32 value);

  // optional uint32 tx = 31;
  bool has_tx() const;
  void clear_tx();
  static const int kTxFieldNumber = 31;
  ::google::protobuf::uint32 tx() const;
  void set_tx(::google::protobuf::uint32 value);

  // optional double forwardPower = 50;
  bool has_forwardpower() const;
  void clear_forwardpower();
  static const int kForwardPowerFieldNumber = 50;
  double forwardpower() const;
  void set_forwardpower(double value);

  // optional double backwardPower = 51;
  bool has_backwardpower() const;
  void clear_backwardpower();
  static const int kBackwardPowerFieldNumber = 51;
  double backwardpower() const;
  void set_backwardpower(double value);

  // optional uint32 antenna = 42;
  bool has_antenna() const;
  void clear_antenna();
  static const int kAntennaFieldNumber = 42;
  ::google::protobuf::uint32 antenna() const;
  void set_antenna(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:R2T2Proto.R2T2Message)
 private:
  void set_has_command();
  void clear_has_command();
  void set_has_rxdata();
  void clear_has_rxdata();
  void set_has_txdata();
  void clear_has_txdata();
  void set_has_fftdata();
  void clear_has_fftdata();
  void set_has_txdataack();
  void clear_has_txdataack();
  void set_has_rxfreq();
  void clear_has_rxfreq();
  void set_has_txfreq();
  void clear_has_txfreq();
  void set_has_txrate();
  void clear_has_txrate();
  void set_has_rxrate();
  void clear_has_rxrate();
  void set_has_fftrate();
  void clear_has_fftrate();
  void set_has_fftsize();
  void clear_has_fftsize();
  void set_has_rx();
  void clear_has_rx();
  void set_has_tx();
  void clear_has_tx();
  void set_has_gain();
  void clear_has_gain();
  void set_has_att();
  void clear_has_att();
  void set_has_antenna();
  void clear_has_antenna();
  void set_has_forwardpower();
  void clear_has_forwardpower();
  void set_has_backwardpower();
  void clear_has_backwardpower();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr rxdata_;
  ::google::protobuf::internal::ArenaStringPtr txdata_;
  ::google::protobuf::internal::ArenaStringPtr fftdata_;
  ::R2T2Proto::R2T2Message_Gain* gain_;
  ::R2T2Proto::R2T2Message_Gain* att_;
  int command_;
  ::google::protobuf::uint32 txdataack_;
  ::google::protobuf::uint64 rxfreq_;
  ::google::protobuf::uint64 txfreq_;
  ::google::protobuf::uint32 txrate_;
  ::google::protobuf::uint32 rxrate_;
  ::google::protobuf::uint32 fftrate_;
  ::google::protobuf::uint32 fftsize_;
  ::google::protobuf::uint32 rx_;
  ::google::protobuf::uint32 tx_;
  double forwardpower_;
  double backwardpower_;
  ::google::protobuf::uint32 antenna_;
  friend struct  protobuf_r2t2_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// R2T2Message_Gain

// required uint32 adc = 1;
inline bool R2T2Message_Gain::has_adc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void R2T2Message_Gain::set_has_adc() {
  _has_bits_[0] |= 0x00000001u;
}
inline void R2T2Message_Gain::clear_has_adc() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void R2T2Message_Gain::clear_adc() {
  adc_ = 0u;
  clear_has_adc();
}
inline ::google::protobuf::uint32 R2T2Message_Gain::adc() const {
  // @@protoc_insertion_point(field_get:R2T2Proto.R2T2Message.Gain.adc)
  return adc_;
}
inline void R2T2Message_Gain::set_adc(::google::protobuf::uint32 value) {
  set_has_adc();
  adc_ = value;
  // @@protoc_insertion_point(field_set:R2T2Proto.R2T2Message.Gain.adc)
}

// required sint32 gain = 2;
inline bool R2T2Message_Gain::has_gain() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void R2T2Message_Gain::set_has_gain() {
  _has_bits_[0] |= 0x00000002u;
}
inline void R2T2Message_Gain::clear_has_gain() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void R2T2Message_Gain::clear_gain() {
  gain_ = 0;
  clear_has_gain();
}
inline ::google::protobuf::int32 R2T2Message_Gain::gain() const {
  // @@protoc_insertion_point(field_get:R2T2Proto.R2T2Message.Gain.gain)
  return gain_;
}
inline void R2T2Message_Gain::set_gain(::google::protobuf::int32 value) {
  set_has_gain();
  gain_ = value;
  // @@protoc_insertion_point(field_set:R2T2Proto.R2T2Message.Gain.gain)
}

// -------------------------------------------------------------------

// R2T2Message

// optional .R2T2Proto.R2T2Message.Command command = 1;
inline bool R2T2Message::has_command() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void R2T2Message::set_has_command() {
  _has_bits_[0] |= 0x00000020u;
}
inline void R2T2Message::clear_has_command() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void R2T2Message::clear_command() {
  command_ = 0;
  clear_has_command();
}
inline ::R2T2Proto::R2T2Message_Command R2T2Message::command() const {
  // @@protoc_insertion_point(field_get:R2T2Proto.R2T2Message.command)
  return static_cast< ::R2T2Proto::R2T2Message_Command >(command_);
}
inline void R2T2Message::set_command(::R2T2Proto::R2T2Message_Command value) {
  assert(::R2T2Proto::R2T2Message_Command_IsValid(value));
  set_has_command();
  command_ = value;
  // @@protoc_insertion_point(field_set:R2T2Proto.R2T2Message.command)
}

// optional bytes rxData = 2;
inline bool R2T2Message::has_rxdata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void R2T2Message::set_has_rxdata() {
  _has_bits_[0] |= 0x00000001u;
}
inline void R2T2Message::clear_has_rxdata() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void R2T2Message::clear_rxdata() {
  rxdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rxdata();
}
inline const ::std::string& R2T2Message::rxdata() const {
  // @@protoc_insertion_point(field_get:R2T2Proto.R2T2Message.rxData)
  return rxdata_.GetNoArena();
}
inline void R2T2Message::set_rxdata(const ::std::string& value) {
  set_has_rxdata();
  rxdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:R2T2Proto.R2T2Message.rxData)
}
#if LANG_CXX11
inline void R2T2Message::set_rxdata(::std::string&& value) {
  set_has_rxdata();
  rxdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:R2T2Proto.R2T2Message.rxData)
}
#endif
inline void R2T2Message::set_rxdata(const char* value) {
  set_has_rxdata();
  rxdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:R2T2Proto.R2T2Message.rxData)
}
inline void R2T2Message::set_rxdata(const void* value, size_t size) {
  set_has_rxdata();
  rxdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:R2T2Proto.R2T2Message.rxData)
}
inline ::std::string* R2T2Message::mutable_rxdata() {
  set_has_rxdata();
  // @@protoc_insertion_point(field_mutable:R2T2Proto.R2T2Message.rxData)
  return rxdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* R2T2Message::release_rxdata() {
  // @@protoc_insertion_point(field_release:R2T2Proto.R2T2Message.rxData)
  clear_has_rxdata();
  return rxdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void R2T2Message::set_allocated_rxdata(::std::string* rxdata) {
  if (rxdata != NULL) {
    set_has_rxdata();
  } else {
    clear_has_rxdata();
  }
  rxdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rxdata);
  // @@protoc_insertion_point(field_set_allocated:R2T2Proto.R2T2Message.rxData)
}

// optional bytes txData = 3;
inline bool R2T2Message::has_txdata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void R2T2Message::set_has_txdata() {
  _has_bits_[0] |= 0x00000002u;
}
inline void R2T2Message::clear_has_txdata() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void R2T2Message::clear_txdata() {
  txdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_txdata();
}
inline const ::std::string& R2T2Message::txdata() const {
  // @@protoc_insertion_point(field_get:R2T2Proto.R2T2Message.txData)
  return txdata_.GetNoArena();
}
inline void R2T2Message::set_txdata(const ::std::string& value) {
  set_has_txdata();
  txdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:R2T2Proto.R2T2Message.txData)
}
#if LANG_CXX11
inline void R2T2Message::set_txdata(::std::string&& value) {
  set_has_txdata();
  txdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:R2T2Proto.R2T2Message.txData)
}
#endif
inline void R2T2Message::set_txdata(const char* value) {
  set_has_txdata();
  txdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:R2T2Proto.R2T2Message.txData)
}
inline void R2T2Message::set_txdata(const void* value, size_t size) {
  set_has_txdata();
  txdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:R2T2Proto.R2T2Message.txData)
}
inline ::std::string* R2T2Message::mutable_txdata() {
  set_has_txdata();
  // @@protoc_insertion_point(field_mutable:R2T2Proto.R2T2Message.txData)
  return txdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* R2T2Message::release_txdata() {
  // @@protoc_insertion_point(field_release:R2T2Proto.R2T2Message.txData)
  clear_has_txdata();
  return txdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void R2T2Message::set_allocated_txdata(::std::string* txdata) {
  if (txdata != NULL) {
    set_has_txdata();
  } else {
    clear_has_txdata();
  }
  txdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txdata);
  // @@protoc_insertion_point(field_set_allocated:R2T2Proto.R2T2Message.txData)
}

// optional bytes fftData = 4;
inline bool R2T2Message::has_fftdata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void R2T2Message::set_has_fftdata() {
  _has_bits_[0] |= 0x00000004u;
}
inline void R2T2Message::clear_has_fftdata() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void R2T2Message::clear_fftdata() {
  fftdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fftdata();
}
inline const ::std::string& R2T2Message::fftdata() const {
  // @@protoc_insertion_point(field_get:R2T2Proto.R2T2Message.fftData)
  return fftdata_.GetNoArena();
}
inline void R2T2Message::set_fftdata(const ::std::string& value) {
  set_has_fftdata();
  fftdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:R2T2Proto.R2T2Message.fftData)
}
#if LANG_CXX11
inline void R2T2Message::set_fftdata(::std::string&& value) {
  set_has_fftdata();
  fftdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:R2T2Proto.R2T2Message.fftData)
}
#endif
inline void R2T2Message::set_fftdata(const char* value) {
  set_has_fftdata();
  fftdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:R2T2Proto.R2T2Message.fftData)
}
inline void R2T2Message::set_fftdata(const void* value, size_t size) {
  set_has_fftdata();
  fftdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:R2T2Proto.R2T2Message.fftData)
}
inline ::std::string* R2T2Message::mutable_fftdata() {
  set_has_fftdata();
  // @@protoc_insertion_point(field_mutable:R2T2Proto.R2T2Message.fftData)
  return fftdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* R2T2Message::release_fftdata() {
  // @@protoc_insertion_point(field_release:R2T2Proto.R2T2Message.fftData)
  clear_has_fftdata();
  return fftdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void R2T2Message::set_allocated_fftdata(::std::string* fftdata) {
  if (fftdata != NULL) {
    set_has_fftdata();
  } else {
    clear_has_fftdata();
  }
  fftdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fftdata);
  // @@protoc_insertion_point(field_set_allocated:R2T2Proto.R2T2Message.fftData)
}

// optional uint32 txDataAck = 10;
inline bool R2T2Message::has_txdataack() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void R2T2Message::set_has_txdataack() {
  _has_bits_[0] |= 0x00000040u;
}
inline void R2T2Message::clear_has_txdataack() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void R2T2Message::clear_txdataack() {
  txdataack_ = 0u;
  clear_has_txdataack();
}
inline ::google::protobuf::uint32 R2T2Message::txdataack() const {
  // @@protoc_insertion_point(field_get:R2T2Proto.R2T2Message.txDataAck)
  return txdataack_;
}
inline void R2T2Message::set_txdataack(::google::protobuf::uint32 value) {
  set_has_txdataack();
  txdataack_ = value;
  // @@protoc_insertion_point(field_set:R2T2Proto.R2T2Message.txDataAck)
}

// optional uint64 rxFreq = 20;
inline bool R2T2Message::has_rxfreq() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void R2T2Message::set_has_rxfreq() {
  _has_bits_[0] |= 0x00000080u;
}
inline void R2T2Message::clear_has_rxfreq() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void R2T2Message::clear_rxfreq() {
  rxfreq_ = GOOGLE_ULONGLONG(0);
  clear_has_rxfreq();
}
inline ::google::protobuf::uint64 R2T2Message::rxfreq() const {
  // @@protoc_insertion_point(field_get:R2T2Proto.R2T2Message.rxFreq)
  return rxfreq_;
}
inline void R2T2Message::set_rxfreq(::google::protobuf::uint64 value) {
  set_has_rxfreq();
  rxfreq_ = value;
  // @@protoc_insertion_point(field_set:R2T2Proto.R2T2Message.rxFreq)
}

// optional uint64 txFreq = 21;
inline bool R2T2Message::has_txfreq() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void R2T2Message::set_has_txfreq() {
  _has_bits_[0] |= 0x00000100u;
}
inline void R2T2Message::clear_has_txfreq() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void R2T2Message::clear_txfreq() {
  txfreq_ = GOOGLE_ULONGLONG(0);
  clear_has_txfreq();
}
inline ::google::protobuf::uint64 R2T2Message::txfreq() const {
  // @@protoc_insertion_point(field_get:R2T2Proto.R2T2Message.txFreq)
  return txfreq_;
}
inline void R2T2Message::set_txfreq(::google::protobuf::uint64 value) {
  set_has_txfreq();
  txfreq_ = value;
  // @@protoc_insertion_point(field_set:R2T2Proto.R2T2Message.txFreq)
}

// optional uint32 txRate = 22;
inline bool R2T2Message::has_txrate() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void R2T2Message::set_has_txrate() {
  _has_bits_[0] |= 0x00000200u;
}
inline void R2T2Message::clear_has_txrate() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void R2T2Message::clear_txrate() {
  txrate_ = 0u;
  clear_has_txrate();
}
inline ::google::protobuf::uint32 R2T2Message::txrate() const {
  // @@protoc_insertion_point(field_get:R2T2Proto.R2T2Message.txRate)
  return txrate_;
}
inline void R2T2Message::set_txrate(::google::protobuf::uint32 value) {
  set_has_txrate();
  txrate_ = value;
  // @@protoc_insertion_point(field_set:R2T2Proto.R2T2Message.txRate)
}

// optional uint32 rxRate = 23;
inline bool R2T2Message::has_rxrate() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void R2T2Message::set_has_rxrate() {
  _has_bits_[0] |= 0x00000400u;
}
inline void R2T2Message::clear_has_rxrate() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void R2T2Message::clear_rxrate() {
  rxrate_ = 0u;
  clear_has_rxrate();
}
inline ::google::protobuf::uint32 R2T2Message::rxrate() const {
  // @@protoc_insertion_point(field_get:R2T2Proto.R2T2Message.rxRate)
  return rxrate_;
}
inline void R2T2Message::set_rxrate(::google::protobuf::uint32 value) {
  set_has_rxrate();
  rxrate_ = value;
  // @@protoc_insertion_point(field_set:R2T2Proto.R2T2Message.rxRate)
}

// optional uint32 fftRate = 24;
inline bool R2T2Message::has_fftrate() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void R2T2Message::set_has_fftrate() {
  _has_bits_[0] |= 0x00000800u;
}
inline void R2T2Message::clear_has_fftrate() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void R2T2Message::clear_fftrate() {
  fftrate_ = 0u;
  clear_has_fftrate();
}
inline ::google::protobuf::uint32 R2T2Message::fftrate() const {
  // @@protoc_insertion_point(field_get:R2T2Proto.R2T2Message.fftRate)
  return fftrate_;
}
inline void R2T2Message::set_fftrate(::google::protobuf::uint32 value) {
  set_has_fftrate();
  fftrate_ = value;
  // @@protoc_insertion_point(field_set:R2T2Proto.R2T2Message.fftRate)
}

// optional uint32 fftSize = 25;
inline bool R2T2Message::has_fftsize() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void R2T2Message::set_has_fftsize() {
  _has_bits_[0] |= 0x00001000u;
}
inline void R2T2Message::clear_has_fftsize() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void R2T2Message::clear_fftsize() {
  fftsize_ = 0u;
  clear_has_fftsize();
}
inline ::google::protobuf::uint32 R2T2Message::fftsize() const {
  // @@protoc_insertion_point(field_get:R2T2Proto.R2T2Message.fftSize)
  return fftsize_;
}
inline void R2T2Message::set_fftsize(::google::protobuf::uint32 value) {
  set_has_fftsize();
  fftsize_ = value;
  // @@protoc_insertion_point(field_set:R2T2Proto.R2T2Message.fftSize)
}

// optional uint32 rx = 30;
inline bool R2T2Message::has_rx() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void R2T2Message::set_has_rx() {
  _has_bits_[0] |= 0x00002000u;
}
inline void R2T2Message::clear_has_rx() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void R2T2Message::clear_rx() {
  rx_ = 0u;
  clear_has_rx();
}
inline ::google::protobuf::uint32 R2T2Message::rx() const {
  // @@protoc_insertion_point(field_get:R2T2Proto.R2T2Message.rx)
  return rx_;
}
inline void R2T2Message::set_rx(::google::protobuf::uint32 value) {
  set_has_rx();
  rx_ = value;
  // @@protoc_insertion_point(field_set:R2T2Proto.R2T2Message.rx)
}

// optional uint32 tx = 31;
inline bool R2T2Message::has_tx() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void R2T2Message::set_has_tx() {
  _has_bits_[0] |= 0x00004000u;
}
inline void R2T2Message::clear_has_tx() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void R2T2Message::clear_tx() {
  tx_ = 0u;
  clear_has_tx();
}
inline ::google::protobuf::uint32 R2T2Message::tx() const {
  // @@protoc_insertion_point(field_get:R2T2Proto.R2T2Message.tx)
  return tx_;
}
inline void R2T2Message::set_tx(::google::protobuf::uint32 value) {
  set_has_tx();
  tx_ = value;
  // @@protoc_insertion_point(field_set:R2T2Proto.R2T2Message.tx)
}

// optional .R2T2Proto.R2T2Message.Gain gain = 40;
inline bool R2T2Message::has_gain() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void R2T2Message::set_has_gain() {
  _has_bits_[0] |= 0x00000008u;
}
inline void R2T2Message::clear_has_gain() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void R2T2Message::clear_gain() {
  if (gain_ != NULL) gain_->::R2T2Proto::R2T2Message_Gain::Clear();
  clear_has_gain();
}
inline const ::R2T2Proto::R2T2Message_Gain& R2T2Message::gain() const {
  // @@protoc_insertion_point(field_get:R2T2Proto.R2T2Message.gain)
  return gain_ != NULL ? *gain_
                         : *::R2T2Proto::R2T2Message_Gain::internal_default_instance();
}
inline ::R2T2Proto::R2T2Message_Gain* R2T2Message::mutable_gain() {
  set_has_gain();
  if (gain_ == NULL) {
    gain_ = new ::R2T2Proto::R2T2Message_Gain;
  }
  // @@protoc_insertion_point(field_mutable:R2T2Proto.R2T2Message.gain)
  return gain_;
}
inline ::R2T2Proto::R2T2Message_Gain* R2T2Message::release_gain() {
  // @@protoc_insertion_point(field_release:R2T2Proto.R2T2Message.gain)
  clear_has_gain();
  ::R2T2Proto::R2T2Message_Gain* temp = gain_;
  gain_ = NULL;
  return temp;
}
inline void R2T2Message::set_allocated_gain(::R2T2Proto::R2T2Message_Gain* gain) {
  delete gain_;
  gain_ = gain;
  if (gain) {
    set_has_gain();
  } else {
    clear_has_gain();
  }
  // @@protoc_insertion_point(field_set_allocated:R2T2Proto.R2T2Message.gain)
}

// optional .R2T2Proto.R2T2Message.Gain att = 41;
inline bool R2T2Message::has_att() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void R2T2Message::set_has_att() {
  _has_bits_[0] |= 0x00000010u;
}
inline void R2T2Message::clear_has_att() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void R2T2Message::clear_att() {
  if (att_ != NULL) att_->::R2T2Proto::R2T2Message_Gain::Clear();
  clear_has_att();
}
inline const ::R2T2Proto::R2T2Message_Gain& R2T2Message::att() const {
  // @@protoc_insertion_point(field_get:R2T2Proto.R2T2Message.att)
  return att_ != NULL ? *att_
                         : *::R2T2Proto::R2T2Message_Gain::internal_default_instance();
}
inline ::R2T2Proto::R2T2Message_Gain* R2T2Message::mutable_att() {
  set_has_att();
  if (att_ == NULL) {
    att_ = new ::R2T2Proto::R2T2Message_Gain;
  }
  // @@protoc_insertion_point(field_mutable:R2T2Proto.R2T2Message.att)
  return att_;
}
inline ::R2T2Proto::R2T2Message_Gain* R2T2Message::release_att() {
  // @@protoc_insertion_point(field_release:R2T2Proto.R2T2Message.att)
  clear_has_att();
  ::R2T2Proto::R2T2Message_Gain* temp = att_;
  att_ = NULL;
  return temp;
}
inline void R2T2Message::set_allocated_att(::R2T2Proto::R2T2Message_Gain* att) {
  delete att_;
  att_ = att;
  if (att) {
    set_has_att();
  } else {
    clear_has_att();
  }
  // @@protoc_insertion_point(field_set_allocated:R2T2Proto.R2T2Message.att)
}

// optional uint32 antenna = 42;
inline bool R2T2Message::has_antenna() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void R2T2Message::set_has_antenna() {
  _has_bits_[0] |= 0x00020000u;
}
inline void R2T2Message::clear_has_antenna() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void R2T2Message::clear_antenna() {
  antenna_ = 0u;
  clear_has_antenna();
}
inline ::google::protobuf::uint32 R2T2Message::antenna() const {
  // @@protoc_insertion_point(field_get:R2T2Proto.R2T2Message.antenna)
  return antenna_;
}
inline void R2T2Message::set_antenna(::google::protobuf::uint32 value) {
  set_has_antenna();
  antenna_ = value;
  // @@protoc_insertion_point(field_set:R2T2Proto.R2T2Message.antenna)
}

// optional double forwardPower = 50;
inline bool R2T2Message::has_forwardpower() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void R2T2Message::set_has_forwardpower() {
  _has_bits_[0] |= 0x00008000u;
}
inline void R2T2Message::clear_has_forwardpower() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void R2T2Message::clear_forwardpower() {
  forwardpower_ = 0;
  clear_has_forwardpower();
}
inline double R2T2Message::forwardpower() const {
  // @@protoc_insertion_point(field_get:R2T2Proto.R2T2Message.forwardPower)
  return forwardpower_;
}
inline void R2T2Message::set_forwardpower(double value) {
  set_has_forwardpower();
  forwardpower_ = value;
  // @@protoc_insertion_point(field_set:R2T2Proto.R2T2Message.forwardPower)
}

// optional double backwardPower = 51;
inline bool R2T2Message::has_backwardpower() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void R2T2Message::set_has_backwardpower() {
  _has_bits_[0] |= 0x00010000u;
}
inline void R2T2Message::clear_has_backwardpower() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void R2T2Message::clear_backwardpower() {
  backwardpower_ = 0;
  clear_has_backwardpower();
}
inline double R2T2Message::backwardpower() const {
  // @@protoc_insertion_point(field_get:R2T2Proto.R2T2Message.backwardPower)
  return backwardpower_;
}
inline void R2T2Message::set_backwardpower(double value) {
  set_has_backwardpower();
  backwardpower_ = value;
  // @@protoc_insertion_point(field_set:R2T2Proto.R2T2Message.backwardPower)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace R2T2Proto

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::R2T2Proto::R2T2Message_Command> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::R2T2Proto::R2T2Message_Command>() {
  return ::R2T2Proto::R2T2Message_Command_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_r2t2_2eproto__INCLUDED
