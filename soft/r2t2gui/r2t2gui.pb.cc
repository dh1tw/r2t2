// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: r2t2gui.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "r2t2gui.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace R2T2GuiProto {
class R2T2GuiMessageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<R2T2GuiMessage> {
} _R2T2GuiMessage_default_instance_;
class R2T2GuiMessageAnswerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<R2T2GuiMessageAnswer> {
} _R2T2GuiMessageAnswer_default_instance_;

namespace protobuf_r2t2gui_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[4];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2T2GuiMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2T2GuiMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2T2GuiMessage, command_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2T2GuiMessage, txdata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2T2GuiMessage, rxfreq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2T2GuiMessage, txfreq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2T2GuiMessage, fftrate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2T2GuiMessage, fftsize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2T2GuiMessage, mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2T2GuiMessage, gain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2T2GuiMessage, antenna_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2T2GuiMessage, agc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2T2GuiMessage, filterlo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2T2GuiMessage, filterhi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2T2GuiMessage, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2T2GuiMessage, notch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2T2GuiMessage, noise_),
  3,
  0,
  2,
  5,
  4,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  1,
  13,
  14,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2T2GuiMessageAnswer, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2T2GuiMessageAnswer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2T2GuiMessageAnswer, command_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2T2GuiMessageAnswer, rxdata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2T2GuiMessageAnswer, fftdata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2T2GuiMessageAnswer, txdataack_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2T2GuiMessageAnswer, rssi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2T2GuiMessageAnswer, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2T2GuiMessageAnswer, fftrate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R2T2GuiMessageAnswer, gain_),
  3,
  0,
  1,
  4,
  5,
  2,
  6,
  7,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 19, sizeof(R2T2GuiMessage)},
  { 34, 46, sizeof(R2T2GuiMessageAnswer)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_R2T2GuiMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_R2T2GuiMessageAnswer_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "r2t2gui.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace

void TableStruct::Shutdown() {
  _R2T2GuiMessage_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _R2T2GuiMessageAnswer_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _R2T2GuiMessage_default_instance_.DefaultConstruct();
  _R2T2GuiMessageAnswer_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\rr2t2gui.proto\022\014R2T2GuiProto\"\352\004\n\016R2T2Gu"
      "iMessage\0225\n\007command\030\001 \001(\0162$.R2T2GuiProto"
      ".R2T2GuiMessage.Command\022\016\n\006txData\030\002 \001(\014\022"
      "\016\n\006rxFreq\030\003 \001(\004\022\016\n\006txFreq\030\004 \001(\004\022\017\n\007fftRa"
      "te\030\005 \001(\r\022\017\n\007fftSize\030\006 \001(\r\022/\n\004mode\030\007 \001(\0162"
      "!.R2T2GuiProto.R2T2GuiMessage.Mode\022\014\n\004ga"
      "in\030\010 \001(\005\022\017\n\007antenna\030\t \001(\r\022-\n\003agc\030\n \001(\0162 "
      ".R2T2GuiProto.R2T2GuiMessage.AGC\022\020\n\010filt"
      "erLo\030\013 \001(\005\022\020\n\010filterHi\030\014 \001(\005\022\017\n\007version\030"
      "\r \001(\t\022\r\n\005notch\030\016 \001(\005\022\r\n\005noise\030\017 \001(\005\"K\n\007C"
      "ommand\022\010\n\004NONE\020\000\022\016\n\nSTARTAUDIO\020\001\022\r\n\tSTOP"
      "AUDIO\020\002\022\n\n\006REQFFT\020\003\022\013\n\007GETINFO\020\004\"s\n\004Mode"
      "\022\007\n\003LSB\020\000\022\007\n\003USB\020\001\022\007\n\003DSB\020\002\022\007\n\003CWL\020\003\022\007\n\003"
      "CWU\020\004\022\006\n\002FM\020\005\022\006\n\002AM\020\006\022\010\n\004DIGU\020\007\022\010\n\004SPEC\020"
      "\010\022\010\n\004DIGL\020\t\022\007\n\003SAM\020\n\022\007\n\003DRM\020\013\";\n\003AGC\022\t\n\005"
      "fixed\020\000\022\010\n\004slow\020\001\022\007\n\003mid\020\002\022\010\n\004fast\020\003\022\014\n\010"
      "veryfast\020\004\"\332\001\n\024R2T2GuiMessageAnswer\022;\n\007c"
      "ommand\030\001 \001(\0162*.R2T2GuiProto.R2T2GuiMessa"
      "geAnswer.Command\022\016\n\006rxData\030\002 \001(\014\022\017\n\007fftD"
      "ata\030\003 \001(\014\022\021\n\ttxDataAck\030\004 \001(\r\022\014\n\004rssi\030\005 \001"
      "(\001\022\017\n\007version\030\006 \001(\t\022\017\n\007fftRate\030\007 \001(\r\022\014\n\004"
      "gain\030\010 \001(\005\"\023\n\007Command\022\010\n\004NONE\020\000"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 871);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "r2t2gui.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_r2t2gui_2eproto

const ::google::protobuf::EnumDescriptor* R2T2GuiMessage_Command_descriptor() {
  protobuf_r2t2gui_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_r2t2gui_2eproto::file_level_enum_descriptors[0];
}
bool R2T2GuiMessage_Command_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const R2T2GuiMessage_Command R2T2GuiMessage::NONE;
const R2T2GuiMessage_Command R2T2GuiMessage::STARTAUDIO;
const R2T2GuiMessage_Command R2T2GuiMessage::STOPAUDIO;
const R2T2GuiMessage_Command R2T2GuiMessage::REQFFT;
const R2T2GuiMessage_Command R2T2GuiMessage::GETINFO;
const R2T2GuiMessage_Command R2T2GuiMessage::Command_MIN;
const R2T2GuiMessage_Command R2T2GuiMessage::Command_MAX;
const int R2T2GuiMessage::Command_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* R2T2GuiMessage_Mode_descriptor() {
  protobuf_r2t2gui_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_r2t2gui_2eproto::file_level_enum_descriptors[1];
}
bool R2T2GuiMessage_Mode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const R2T2GuiMessage_Mode R2T2GuiMessage::LSB;
const R2T2GuiMessage_Mode R2T2GuiMessage::USB;
const R2T2GuiMessage_Mode R2T2GuiMessage::DSB;
const R2T2GuiMessage_Mode R2T2GuiMessage::CWL;
const R2T2GuiMessage_Mode R2T2GuiMessage::CWU;
const R2T2GuiMessage_Mode R2T2GuiMessage::FM;
const R2T2GuiMessage_Mode R2T2GuiMessage::AM;
const R2T2GuiMessage_Mode R2T2GuiMessage::DIGU;
const R2T2GuiMessage_Mode R2T2GuiMessage::SPEC;
const R2T2GuiMessage_Mode R2T2GuiMessage::DIGL;
const R2T2GuiMessage_Mode R2T2GuiMessage::SAM;
const R2T2GuiMessage_Mode R2T2GuiMessage::DRM;
const R2T2GuiMessage_Mode R2T2GuiMessage::Mode_MIN;
const R2T2GuiMessage_Mode R2T2GuiMessage::Mode_MAX;
const int R2T2GuiMessage::Mode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* R2T2GuiMessage_AGC_descriptor() {
  protobuf_r2t2gui_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_r2t2gui_2eproto::file_level_enum_descriptors[2];
}
bool R2T2GuiMessage_AGC_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const R2T2GuiMessage_AGC R2T2GuiMessage::fixed;
const R2T2GuiMessage_AGC R2T2GuiMessage::slow;
const R2T2GuiMessage_AGC R2T2GuiMessage::mid;
const R2T2GuiMessage_AGC R2T2GuiMessage::fast;
const R2T2GuiMessage_AGC R2T2GuiMessage::veryfast;
const R2T2GuiMessage_AGC R2T2GuiMessage::AGC_MIN;
const R2T2GuiMessage_AGC R2T2GuiMessage::AGC_MAX;
const int R2T2GuiMessage::AGC_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* R2T2GuiMessageAnswer_Command_descriptor() {
  protobuf_r2t2gui_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_r2t2gui_2eproto::file_level_enum_descriptors[3];
}
bool R2T2GuiMessageAnswer_Command_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const R2T2GuiMessageAnswer_Command R2T2GuiMessageAnswer::NONE;
const R2T2GuiMessageAnswer_Command R2T2GuiMessageAnswer::Command_MIN;
const R2T2GuiMessageAnswer_Command R2T2GuiMessageAnswer::Command_MAX;
const int R2T2GuiMessageAnswer::Command_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int R2T2GuiMessage::kCommandFieldNumber;
const int R2T2GuiMessage::kTxDataFieldNumber;
const int R2T2GuiMessage::kRxFreqFieldNumber;
const int R2T2GuiMessage::kTxFreqFieldNumber;
const int R2T2GuiMessage::kFftRateFieldNumber;
const int R2T2GuiMessage::kFftSizeFieldNumber;
const int R2T2GuiMessage::kModeFieldNumber;
const int R2T2GuiMessage::kGainFieldNumber;
const int R2T2GuiMessage::kAntennaFieldNumber;
const int R2T2GuiMessage::kAgcFieldNumber;
const int R2T2GuiMessage::kFilterLoFieldNumber;
const int R2T2GuiMessage::kFilterHiFieldNumber;
const int R2T2GuiMessage::kVersionFieldNumber;
const int R2T2GuiMessage::kNotchFieldNumber;
const int R2T2GuiMessage::kNoiseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

R2T2GuiMessage::R2T2GuiMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_r2t2gui_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:R2T2GuiProto.R2T2GuiMessage)
}
R2T2GuiMessage::R2T2GuiMessage(const R2T2GuiMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  txdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_txdata()) {
    txdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.txdata_);
  }
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_version()) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  ::memcpy(&rxfreq_, &from.rxfreq_,
    reinterpret_cast<char*>(&noise_) -
    reinterpret_cast<char*>(&rxfreq_) + sizeof(noise_));
  // @@protoc_insertion_point(copy_constructor:R2T2GuiProto.R2T2GuiMessage)
}

void R2T2GuiMessage::SharedCtor() {
  _cached_size_ = 0;
  txdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&rxfreq_, 0, reinterpret_cast<char*>(&noise_) -
    reinterpret_cast<char*>(&rxfreq_) + sizeof(noise_));
}

R2T2GuiMessage::~R2T2GuiMessage() {
  // @@protoc_insertion_point(destructor:R2T2GuiProto.R2T2GuiMessage)
  SharedDtor();
}

void R2T2GuiMessage::SharedDtor() {
  txdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void R2T2GuiMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* R2T2GuiMessage::descriptor() {
  protobuf_r2t2gui_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_r2t2gui_2eproto::file_level_metadata[0].descriptor;
}

const R2T2GuiMessage& R2T2GuiMessage::default_instance() {
  protobuf_r2t2gui_2eproto::InitDefaults();
  return *internal_default_instance();
}

R2T2GuiMessage* R2T2GuiMessage::New(::google::protobuf::Arena* arena) const {
  R2T2GuiMessage* n = new R2T2GuiMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void R2T2GuiMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:R2T2GuiProto.R2T2GuiMessage)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_txdata()) {
      GOOGLE_DCHECK(!txdata_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*txdata_.UnsafeRawStringPointer())->clear();
    }
    if (has_version()) {
      GOOGLE_DCHECK(!version_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*version_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 252u) {
    ::memset(&rxfreq_, 0, reinterpret_cast<char*>(&mode_) -
      reinterpret_cast<char*>(&rxfreq_) + sizeof(mode_));
  }
  if (_has_bits_[8 / 32] & 32512u) {
    ::memset(&gain_, 0, reinterpret_cast<char*>(&noise_) -
      reinterpret_cast<char*>(&gain_) + sizeof(noise_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool R2T2GuiMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:R2T2GuiProto.R2T2GuiMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .R2T2GuiProto.R2T2GuiMessage.Command command = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::R2T2GuiProto::R2T2GuiMessage_Command_IsValid(value)) {
            set_command(static_cast< ::R2T2GuiProto::R2T2GuiMessage_Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes txData = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_txdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 rxFreq = 3;
      case 3: {
        if (tag == 24u) {
          set_has_rxfreq();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rxfreq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 txFreq = 4;
      case 4: {
        if (tag == 32u) {
          set_has_txfreq();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &txfreq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 fftRate = 5;
      case 5: {
        if (tag == 40u) {
          set_has_fftrate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fftrate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 fftSize = 6;
      case 6: {
        if (tag == 48u) {
          set_has_fftsize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fftsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .R2T2GuiProto.R2T2GuiMessage.Mode mode = 7;
      case 7: {
        if (tag == 56u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::R2T2GuiProto::R2T2GuiMessage_Mode_IsValid(value)) {
            set_mode(static_cast< ::R2T2GuiProto::R2T2GuiMessage_Mode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 gain = 8;
      case 8: {
        if (tag == 64u) {
          set_has_gain();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gain_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 antenna = 9;
      case 9: {
        if (tag == 72u) {
          set_has_antenna();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &antenna_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .R2T2GuiProto.R2T2GuiMessage.AGC agc = 10;
      case 10: {
        if (tag == 80u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::R2T2GuiProto::R2T2GuiMessage_AGC_IsValid(value)) {
            set_agc(static_cast< ::R2T2GuiProto::R2T2GuiMessage_AGC >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 filterLo = 11;
      case 11: {
        if (tag == 88u) {
          set_has_filterlo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &filterlo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 filterHi = 12;
      case 12: {
        if (tag == 96u) {
          set_has_filterhi();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &filterhi_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string version = 13;
      case 13: {
        if (tag == 106u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "R2T2GuiProto.R2T2GuiMessage.version");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 notch = 14;
      case 14: {
        if (tag == 112u) {
          set_has_notch();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &notch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 noise = 15;
      case 15: {
        if (tag == 120u) {
          set_has_noise();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &noise_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:R2T2GuiProto.R2T2GuiMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:R2T2GuiProto.R2T2GuiMessage)
  return false;
#undef DO_
}

void R2T2GuiMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:R2T2GuiProto.R2T2GuiMessage)
  // optional .R2T2GuiProto.R2T2GuiMessage.Command command = 1;
  if (has_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->command(), output);
  }

  // optional bytes txData = 2;
  if (has_txdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->txdata(), output);
  }

  // optional uint64 rxFreq = 3;
  if (has_rxfreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->rxfreq(), output);
  }

  // optional uint64 txFreq = 4;
  if (has_txfreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->txfreq(), output);
  }

  // optional uint32 fftRate = 5;
  if (has_fftrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->fftrate(), output);
  }

  // optional uint32 fftSize = 6;
  if (has_fftsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->fftsize(), output);
  }

  // optional .R2T2GuiProto.R2T2GuiMessage.Mode mode = 7;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->mode(), output);
  }

  // optional int32 gain = 8;
  if (has_gain()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->gain(), output);
  }

  // optional uint32 antenna = 9;
  if (has_antenna()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->antenna(), output);
  }

  // optional .R2T2GuiProto.R2T2GuiMessage.AGC agc = 10;
  if (has_agc()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->agc(), output);
  }

  // optional int32 filterLo = 11;
  if (has_filterlo()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->filterlo(), output);
  }

  // optional int32 filterHi = 12;
  if (has_filterhi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->filterhi(), output);
  }

  // optional string version = 13;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "R2T2GuiProto.R2T2GuiMessage.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->version(), output);
  }

  // optional int32 notch = 14;
  if (has_notch()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->notch(), output);
  }

  // optional int32 noise = 15;
  if (has_noise()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->noise(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:R2T2GuiProto.R2T2GuiMessage)
}

::google::protobuf::uint8* R2T2GuiMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:R2T2GuiProto.R2T2GuiMessage)
  // optional .R2T2GuiProto.R2T2GuiMessage.Command command = 1;
  if (has_command()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->command(), target);
  }

  // optional bytes txData = 2;
  if (has_txdata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->txdata(), target);
  }

  // optional uint64 rxFreq = 3;
  if (has_rxfreq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->rxfreq(), target);
  }

  // optional uint64 txFreq = 4;
  if (has_txfreq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->txfreq(), target);
  }

  // optional uint32 fftRate = 5;
  if (has_fftrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->fftrate(), target);
  }

  // optional uint32 fftSize = 6;
  if (has_fftsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->fftsize(), target);
  }

  // optional .R2T2GuiProto.R2T2GuiMessage.Mode mode = 7;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->mode(), target);
  }

  // optional int32 gain = 8;
  if (has_gain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->gain(), target);
  }

  // optional uint32 antenna = 9;
  if (has_antenna()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->antenna(), target);
  }

  // optional .R2T2GuiProto.R2T2GuiMessage.AGC agc = 10;
  if (has_agc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->agc(), target);
  }

  // optional int32 filterLo = 11;
  if (has_filterlo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->filterlo(), target);
  }

  // optional int32 filterHi = 12;
  if (has_filterhi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->filterhi(), target);
  }

  // optional string version = 13;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "R2T2GuiProto.R2T2GuiMessage.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->version(), target);
  }

  // optional int32 notch = 14;
  if (has_notch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->notch(), target);
  }

  // optional int32 noise = 15;
  if (has_noise()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->noise(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:R2T2GuiProto.R2T2GuiMessage)
  return target;
}

size_t R2T2GuiMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:R2T2GuiProto.R2T2GuiMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes txData = 2;
    if (has_txdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->txdata());
    }

    // optional string version = 13;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional uint64 rxFreq = 3;
    if (has_rxfreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rxfreq());
    }

    // optional .R2T2GuiProto.R2T2GuiMessage.Command command = 1;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->command());
    }

    // optional uint32 fftRate = 5;
    if (has_fftrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fftrate());
    }

    // optional uint64 txFreq = 4;
    if (has_txfreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->txfreq());
    }

    // optional uint32 fftSize = 6;
    if (has_fftsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fftsize());
    }

    // optional .R2T2GuiProto.R2T2GuiMessage.Mode mode = 7;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
    }

  }
  if (_has_bits_[8 / 32] & 32512u) {
    // optional int32 gain = 8;
    if (has_gain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gain());
    }

    // optional uint32 antenna = 9;
    if (has_antenna()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->antenna());
    }

    // optional .R2T2GuiProto.R2T2GuiMessage.AGC agc = 10;
    if (has_agc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->agc());
    }

    // optional int32 filterLo = 11;
    if (has_filterlo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->filterlo());
    }

    // optional int32 filterHi = 12;
    if (has_filterhi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->filterhi());
    }

    // optional int32 notch = 14;
    if (has_notch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->notch());
    }

    // optional int32 noise = 15;
    if (has_noise()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->noise());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void R2T2GuiMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:R2T2GuiProto.R2T2GuiMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const R2T2GuiMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const R2T2GuiMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:R2T2GuiProto.R2T2GuiMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:R2T2GuiProto.R2T2GuiMessage)
    MergeFrom(*source);
  }
}

void R2T2GuiMessage::MergeFrom(const R2T2GuiMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:R2T2GuiProto.R2T2GuiMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 255u) {
    if (from.has_txdata()) {
      set_has_txdata();
      txdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.txdata_);
    }
    if (from.has_version()) {
      set_has_version();
      version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
    }
    if (from.has_rxfreq()) {
      set_rxfreq(from.rxfreq());
    }
    if (from.has_command()) {
      set_command(from.command());
    }
    if (from.has_fftrate()) {
      set_fftrate(from.fftrate());
    }
    if (from.has_txfreq()) {
      set_txfreq(from.txfreq());
    }
    if (from.has_fftsize()) {
      set_fftsize(from.fftsize());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
  }
  if (from._has_bits_[8 / 32] & 32512u) {
    if (from.has_gain()) {
      set_gain(from.gain());
    }
    if (from.has_antenna()) {
      set_antenna(from.antenna());
    }
    if (from.has_agc()) {
      set_agc(from.agc());
    }
    if (from.has_filterlo()) {
      set_filterlo(from.filterlo());
    }
    if (from.has_filterhi()) {
      set_filterhi(from.filterhi());
    }
    if (from.has_notch()) {
      set_notch(from.notch());
    }
    if (from.has_noise()) {
      set_noise(from.noise());
    }
  }
}

void R2T2GuiMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:R2T2GuiProto.R2T2GuiMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void R2T2GuiMessage::CopyFrom(const R2T2GuiMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:R2T2GuiProto.R2T2GuiMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool R2T2GuiMessage::IsInitialized() const {
  return true;
}

void R2T2GuiMessage::Swap(R2T2GuiMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void R2T2GuiMessage::InternalSwap(R2T2GuiMessage* other) {
  txdata_.Swap(&other->txdata_);
  version_.Swap(&other->version_);
  std::swap(rxfreq_, other->rxfreq_);
  std::swap(command_, other->command_);
  std::swap(fftrate_, other->fftrate_);
  std::swap(txfreq_, other->txfreq_);
  std::swap(fftsize_, other->fftsize_);
  std::swap(mode_, other->mode_);
  std::swap(gain_, other->gain_);
  std::swap(antenna_, other->antenna_);
  std::swap(agc_, other->agc_);
  std::swap(filterlo_, other->filterlo_);
  std::swap(filterhi_, other->filterhi_);
  std::swap(notch_, other->notch_);
  std::swap(noise_, other->noise_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata R2T2GuiMessage::GetMetadata() const {
  protobuf_r2t2gui_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_r2t2gui_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// R2T2GuiMessage

// optional .R2T2GuiProto.R2T2GuiMessage.Command command = 1;
bool R2T2GuiMessage::has_command() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void R2T2GuiMessage::set_has_command() {
  _has_bits_[0] |= 0x00000008u;
}
void R2T2GuiMessage::clear_has_command() {
  _has_bits_[0] &= ~0x00000008u;
}
void R2T2GuiMessage::clear_command() {
  command_ = 0;
  clear_has_command();
}
::R2T2GuiProto::R2T2GuiMessage_Command R2T2GuiMessage::command() const {
  // @@protoc_insertion_point(field_get:R2T2GuiProto.R2T2GuiMessage.command)
  return static_cast< ::R2T2GuiProto::R2T2GuiMessage_Command >(command_);
}
void R2T2GuiMessage::set_command(::R2T2GuiProto::R2T2GuiMessage_Command value) {
  assert(::R2T2GuiProto::R2T2GuiMessage_Command_IsValid(value));
  set_has_command();
  command_ = value;
  // @@protoc_insertion_point(field_set:R2T2GuiProto.R2T2GuiMessage.command)
}

// optional bytes txData = 2;
bool R2T2GuiMessage::has_txdata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void R2T2GuiMessage::set_has_txdata() {
  _has_bits_[0] |= 0x00000001u;
}
void R2T2GuiMessage::clear_has_txdata() {
  _has_bits_[0] &= ~0x00000001u;
}
void R2T2GuiMessage::clear_txdata() {
  txdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_txdata();
}
const ::std::string& R2T2GuiMessage::txdata() const {
  // @@protoc_insertion_point(field_get:R2T2GuiProto.R2T2GuiMessage.txData)
  return txdata_.GetNoArena();
}
void R2T2GuiMessage::set_txdata(const ::std::string& value) {
  set_has_txdata();
  txdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:R2T2GuiProto.R2T2GuiMessage.txData)
}
#if LANG_CXX11
void R2T2GuiMessage::set_txdata(::std::string&& value) {
  set_has_txdata();
  txdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:R2T2GuiProto.R2T2GuiMessage.txData)
}
#endif
void R2T2GuiMessage::set_txdata(const char* value) {
  set_has_txdata();
  txdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:R2T2GuiProto.R2T2GuiMessage.txData)
}
void R2T2GuiMessage::set_txdata(const void* value, size_t size) {
  set_has_txdata();
  txdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:R2T2GuiProto.R2T2GuiMessage.txData)
}
::std::string* R2T2GuiMessage::mutable_txdata() {
  set_has_txdata();
  // @@protoc_insertion_point(field_mutable:R2T2GuiProto.R2T2GuiMessage.txData)
  return txdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* R2T2GuiMessage::release_txdata() {
  // @@protoc_insertion_point(field_release:R2T2GuiProto.R2T2GuiMessage.txData)
  clear_has_txdata();
  return txdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void R2T2GuiMessage::set_allocated_txdata(::std::string* txdata) {
  if (txdata != NULL) {
    set_has_txdata();
  } else {
    clear_has_txdata();
  }
  txdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txdata);
  // @@protoc_insertion_point(field_set_allocated:R2T2GuiProto.R2T2GuiMessage.txData)
}

// optional uint64 rxFreq = 3;
bool R2T2GuiMessage::has_rxfreq() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void R2T2GuiMessage::set_has_rxfreq() {
  _has_bits_[0] |= 0x00000004u;
}
void R2T2GuiMessage::clear_has_rxfreq() {
  _has_bits_[0] &= ~0x00000004u;
}
void R2T2GuiMessage::clear_rxfreq() {
  rxfreq_ = GOOGLE_ULONGLONG(0);
  clear_has_rxfreq();
}
::google::protobuf::uint64 R2T2GuiMessage::rxfreq() const {
  // @@protoc_insertion_point(field_get:R2T2GuiProto.R2T2GuiMessage.rxFreq)
  return rxfreq_;
}
void R2T2GuiMessage::set_rxfreq(::google::protobuf::uint64 value) {
  set_has_rxfreq();
  rxfreq_ = value;
  // @@protoc_insertion_point(field_set:R2T2GuiProto.R2T2GuiMessage.rxFreq)
}

// optional uint64 txFreq = 4;
bool R2T2GuiMessage::has_txfreq() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void R2T2GuiMessage::set_has_txfreq() {
  _has_bits_[0] |= 0x00000020u;
}
void R2T2GuiMessage::clear_has_txfreq() {
  _has_bits_[0] &= ~0x00000020u;
}
void R2T2GuiMessage::clear_txfreq() {
  txfreq_ = GOOGLE_ULONGLONG(0);
  clear_has_txfreq();
}
::google::protobuf::uint64 R2T2GuiMessage::txfreq() const {
  // @@protoc_insertion_point(field_get:R2T2GuiProto.R2T2GuiMessage.txFreq)
  return txfreq_;
}
void R2T2GuiMessage::set_txfreq(::google::protobuf::uint64 value) {
  set_has_txfreq();
  txfreq_ = value;
  // @@protoc_insertion_point(field_set:R2T2GuiProto.R2T2GuiMessage.txFreq)
}

// optional uint32 fftRate = 5;
bool R2T2GuiMessage::has_fftrate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void R2T2GuiMessage::set_has_fftrate() {
  _has_bits_[0] |= 0x00000010u;
}
void R2T2GuiMessage::clear_has_fftrate() {
  _has_bits_[0] &= ~0x00000010u;
}
void R2T2GuiMessage::clear_fftrate() {
  fftrate_ = 0u;
  clear_has_fftrate();
}
::google::protobuf::uint32 R2T2GuiMessage::fftrate() const {
  // @@protoc_insertion_point(field_get:R2T2GuiProto.R2T2GuiMessage.fftRate)
  return fftrate_;
}
void R2T2GuiMessage::set_fftrate(::google::protobuf::uint32 value) {
  set_has_fftrate();
  fftrate_ = value;
  // @@protoc_insertion_point(field_set:R2T2GuiProto.R2T2GuiMessage.fftRate)
}

// optional uint32 fftSize = 6;
bool R2T2GuiMessage::has_fftsize() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void R2T2GuiMessage::set_has_fftsize() {
  _has_bits_[0] |= 0x00000040u;
}
void R2T2GuiMessage::clear_has_fftsize() {
  _has_bits_[0] &= ~0x00000040u;
}
void R2T2GuiMessage::clear_fftsize() {
  fftsize_ = 0u;
  clear_has_fftsize();
}
::google::protobuf::uint32 R2T2GuiMessage::fftsize() const {
  // @@protoc_insertion_point(field_get:R2T2GuiProto.R2T2GuiMessage.fftSize)
  return fftsize_;
}
void R2T2GuiMessage::set_fftsize(::google::protobuf::uint32 value) {
  set_has_fftsize();
  fftsize_ = value;
  // @@protoc_insertion_point(field_set:R2T2GuiProto.R2T2GuiMessage.fftSize)
}

// optional .R2T2GuiProto.R2T2GuiMessage.Mode mode = 7;
bool R2T2GuiMessage::has_mode() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void R2T2GuiMessage::set_has_mode() {
  _has_bits_[0] |= 0x00000080u;
}
void R2T2GuiMessage::clear_has_mode() {
  _has_bits_[0] &= ~0x00000080u;
}
void R2T2GuiMessage::clear_mode() {
  mode_ = 0;
  clear_has_mode();
}
::R2T2GuiProto::R2T2GuiMessage_Mode R2T2GuiMessage::mode() const {
  // @@protoc_insertion_point(field_get:R2T2GuiProto.R2T2GuiMessage.mode)
  return static_cast< ::R2T2GuiProto::R2T2GuiMessage_Mode >(mode_);
}
void R2T2GuiMessage::set_mode(::R2T2GuiProto::R2T2GuiMessage_Mode value) {
  assert(::R2T2GuiProto::R2T2GuiMessage_Mode_IsValid(value));
  set_has_mode();
  mode_ = value;
  // @@protoc_insertion_point(field_set:R2T2GuiProto.R2T2GuiMessage.mode)
}

// optional int32 gain = 8;
bool R2T2GuiMessage::has_gain() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void R2T2GuiMessage::set_has_gain() {
  _has_bits_[0] |= 0x00000100u;
}
void R2T2GuiMessage::clear_has_gain() {
  _has_bits_[0] &= ~0x00000100u;
}
void R2T2GuiMessage::clear_gain() {
  gain_ = 0;
  clear_has_gain();
}
::google::protobuf::int32 R2T2GuiMessage::gain() const {
  // @@protoc_insertion_point(field_get:R2T2GuiProto.R2T2GuiMessage.gain)
  return gain_;
}
void R2T2GuiMessage::set_gain(::google::protobuf::int32 value) {
  set_has_gain();
  gain_ = value;
  // @@protoc_insertion_point(field_set:R2T2GuiProto.R2T2GuiMessage.gain)
}

// optional uint32 antenna = 9;
bool R2T2GuiMessage::has_antenna() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void R2T2GuiMessage::set_has_antenna() {
  _has_bits_[0] |= 0x00000200u;
}
void R2T2GuiMessage::clear_has_antenna() {
  _has_bits_[0] &= ~0x00000200u;
}
void R2T2GuiMessage::clear_antenna() {
  antenna_ = 0u;
  clear_has_antenna();
}
::google::protobuf::uint32 R2T2GuiMessage::antenna() const {
  // @@protoc_insertion_point(field_get:R2T2GuiProto.R2T2GuiMessage.antenna)
  return antenna_;
}
void R2T2GuiMessage::set_antenna(::google::protobuf::uint32 value) {
  set_has_antenna();
  antenna_ = value;
  // @@protoc_insertion_point(field_set:R2T2GuiProto.R2T2GuiMessage.antenna)
}

// optional .R2T2GuiProto.R2T2GuiMessage.AGC agc = 10;
bool R2T2GuiMessage::has_agc() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void R2T2GuiMessage::set_has_agc() {
  _has_bits_[0] |= 0x00000400u;
}
void R2T2GuiMessage::clear_has_agc() {
  _has_bits_[0] &= ~0x00000400u;
}
void R2T2GuiMessage::clear_agc() {
  agc_ = 0;
  clear_has_agc();
}
::R2T2GuiProto::R2T2GuiMessage_AGC R2T2GuiMessage::agc() const {
  // @@protoc_insertion_point(field_get:R2T2GuiProto.R2T2GuiMessage.agc)
  return static_cast< ::R2T2GuiProto::R2T2GuiMessage_AGC >(agc_);
}
void R2T2GuiMessage::set_agc(::R2T2GuiProto::R2T2GuiMessage_AGC value) {
  assert(::R2T2GuiProto::R2T2GuiMessage_AGC_IsValid(value));
  set_has_agc();
  agc_ = value;
  // @@protoc_insertion_point(field_set:R2T2GuiProto.R2T2GuiMessage.agc)
}

// optional int32 filterLo = 11;
bool R2T2GuiMessage::has_filterlo() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void R2T2GuiMessage::set_has_filterlo() {
  _has_bits_[0] |= 0x00000800u;
}
void R2T2GuiMessage::clear_has_filterlo() {
  _has_bits_[0] &= ~0x00000800u;
}
void R2T2GuiMessage::clear_filterlo() {
  filterlo_ = 0;
  clear_has_filterlo();
}
::google::protobuf::int32 R2T2GuiMessage::filterlo() const {
  // @@protoc_insertion_point(field_get:R2T2GuiProto.R2T2GuiMessage.filterLo)
  return filterlo_;
}
void R2T2GuiMessage::set_filterlo(::google::protobuf::int32 value) {
  set_has_filterlo();
  filterlo_ = value;
  // @@protoc_insertion_point(field_set:R2T2GuiProto.R2T2GuiMessage.filterLo)
}

// optional int32 filterHi = 12;
bool R2T2GuiMessage::has_filterhi() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void R2T2GuiMessage::set_has_filterhi() {
  _has_bits_[0] |= 0x00001000u;
}
void R2T2GuiMessage::clear_has_filterhi() {
  _has_bits_[0] &= ~0x00001000u;
}
void R2T2GuiMessage::clear_filterhi() {
  filterhi_ = 0;
  clear_has_filterhi();
}
::google::protobuf::int32 R2T2GuiMessage::filterhi() const {
  // @@protoc_insertion_point(field_get:R2T2GuiProto.R2T2GuiMessage.filterHi)
  return filterhi_;
}
void R2T2GuiMessage::set_filterhi(::google::protobuf::int32 value) {
  set_has_filterhi();
  filterhi_ = value;
  // @@protoc_insertion_point(field_set:R2T2GuiProto.R2T2GuiMessage.filterHi)
}

// optional string version = 13;
bool R2T2GuiMessage::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void R2T2GuiMessage::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
void R2T2GuiMessage::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void R2T2GuiMessage::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_version();
}
const ::std::string& R2T2GuiMessage::version() const {
  // @@protoc_insertion_point(field_get:R2T2GuiProto.R2T2GuiMessage.version)
  return version_.GetNoArena();
}
void R2T2GuiMessage::set_version(const ::std::string& value) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:R2T2GuiProto.R2T2GuiMessage.version)
}
#if LANG_CXX11
void R2T2GuiMessage::set_version(::std::string&& value) {
  set_has_version();
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:R2T2GuiProto.R2T2GuiMessage.version)
}
#endif
void R2T2GuiMessage::set_version(const char* value) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:R2T2GuiProto.R2T2GuiMessage.version)
}
void R2T2GuiMessage::set_version(const char* value, size_t size) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:R2T2GuiProto.R2T2GuiMessage.version)
}
::std::string* R2T2GuiMessage::mutable_version() {
  set_has_version();
  // @@protoc_insertion_point(field_mutable:R2T2GuiProto.R2T2GuiMessage.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* R2T2GuiMessage::release_version() {
  // @@protoc_insertion_point(field_release:R2T2GuiProto.R2T2GuiMessage.version)
  clear_has_version();
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void R2T2GuiMessage::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    set_has_version();
  } else {
    clear_has_version();
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:R2T2GuiProto.R2T2GuiMessage.version)
}

// optional int32 notch = 14;
bool R2T2GuiMessage::has_notch() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void R2T2GuiMessage::set_has_notch() {
  _has_bits_[0] |= 0x00002000u;
}
void R2T2GuiMessage::clear_has_notch() {
  _has_bits_[0] &= ~0x00002000u;
}
void R2T2GuiMessage::clear_notch() {
  notch_ = 0;
  clear_has_notch();
}
::google::protobuf::int32 R2T2GuiMessage::notch() const {
  // @@protoc_insertion_point(field_get:R2T2GuiProto.R2T2GuiMessage.notch)
  return notch_;
}
void R2T2GuiMessage::set_notch(::google::protobuf::int32 value) {
  set_has_notch();
  notch_ = value;
  // @@protoc_insertion_point(field_set:R2T2GuiProto.R2T2GuiMessage.notch)
}

// optional int32 noise = 15;
bool R2T2GuiMessage::has_noise() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void R2T2GuiMessage::set_has_noise() {
  _has_bits_[0] |= 0x00004000u;
}
void R2T2GuiMessage::clear_has_noise() {
  _has_bits_[0] &= ~0x00004000u;
}
void R2T2GuiMessage::clear_noise() {
  noise_ = 0;
  clear_has_noise();
}
::google::protobuf::int32 R2T2GuiMessage::noise() const {
  // @@protoc_insertion_point(field_get:R2T2GuiProto.R2T2GuiMessage.noise)
  return noise_;
}
void R2T2GuiMessage::set_noise(::google::protobuf::int32 value) {
  set_has_noise();
  noise_ = value;
  // @@protoc_insertion_point(field_set:R2T2GuiProto.R2T2GuiMessage.noise)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int R2T2GuiMessageAnswer::kCommandFieldNumber;
const int R2T2GuiMessageAnswer::kRxDataFieldNumber;
const int R2T2GuiMessageAnswer::kFftDataFieldNumber;
const int R2T2GuiMessageAnswer::kTxDataAckFieldNumber;
const int R2T2GuiMessageAnswer::kRssiFieldNumber;
const int R2T2GuiMessageAnswer::kVersionFieldNumber;
const int R2T2GuiMessageAnswer::kFftRateFieldNumber;
const int R2T2GuiMessageAnswer::kGainFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

R2T2GuiMessageAnswer::R2T2GuiMessageAnswer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_r2t2gui_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:R2T2GuiProto.R2T2GuiMessageAnswer)
}
R2T2GuiMessageAnswer::R2T2GuiMessageAnswer(const R2T2GuiMessageAnswer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rxdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_rxdata()) {
    rxdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rxdata_);
  }
  fftdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fftdata()) {
    fftdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fftdata_);
  }
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_version()) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  ::memcpy(&command_, &from.command_,
    reinterpret_cast<char*>(&gain_) -
    reinterpret_cast<char*>(&command_) + sizeof(gain_));
  // @@protoc_insertion_point(copy_constructor:R2T2GuiProto.R2T2GuiMessageAnswer)
}

void R2T2GuiMessageAnswer::SharedCtor() {
  _cached_size_ = 0;
  rxdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fftdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&command_, 0, reinterpret_cast<char*>(&gain_) -
    reinterpret_cast<char*>(&command_) + sizeof(gain_));
}

R2T2GuiMessageAnswer::~R2T2GuiMessageAnswer() {
  // @@protoc_insertion_point(destructor:R2T2GuiProto.R2T2GuiMessageAnswer)
  SharedDtor();
}

void R2T2GuiMessageAnswer::SharedDtor() {
  rxdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fftdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void R2T2GuiMessageAnswer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* R2T2GuiMessageAnswer::descriptor() {
  protobuf_r2t2gui_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_r2t2gui_2eproto::file_level_metadata[1].descriptor;
}

const R2T2GuiMessageAnswer& R2T2GuiMessageAnswer::default_instance() {
  protobuf_r2t2gui_2eproto::InitDefaults();
  return *internal_default_instance();
}

R2T2GuiMessageAnswer* R2T2GuiMessageAnswer::New(::google::protobuf::Arena* arena) const {
  R2T2GuiMessageAnswer* n = new R2T2GuiMessageAnswer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void R2T2GuiMessageAnswer::Clear() {
// @@protoc_insertion_point(message_clear_start:R2T2GuiProto.R2T2GuiMessageAnswer)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_rxdata()) {
      GOOGLE_DCHECK(!rxdata_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*rxdata_.UnsafeRawStringPointer())->clear();
    }
    if (has_fftdata()) {
      GOOGLE_DCHECK(!fftdata_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*fftdata_.UnsafeRawStringPointer())->clear();
    }
    if (has_version()) {
      GOOGLE_DCHECK(!version_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*version_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 248u) {
    ::memset(&command_, 0, reinterpret_cast<char*>(&gain_) -
      reinterpret_cast<char*>(&command_) + sizeof(gain_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool R2T2GuiMessageAnswer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:R2T2GuiProto.R2T2GuiMessageAnswer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .R2T2GuiProto.R2T2GuiMessageAnswer.Command command = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::R2T2GuiProto::R2T2GuiMessageAnswer_Command_IsValid(value)) {
            set_command(static_cast< ::R2T2GuiProto::R2T2GuiMessageAnswer_Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes rxData = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rxdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes fftData = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_fftdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 txDataAck = 4;
      case 4: {
        if (tag == 32u) {
          set_has_txdataack();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &txdataack_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double rssi = 5;
      case 5: {
        if (tag == 41u) {
          set_has_rssi();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rssi_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string version = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "R2T2GuiProto.R2T2GuiMessageAnswer.version");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 fftRate = 7;
      case 7: {
        if (tag == 56u) {
          set_has_fftrate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fftrate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 gain = 8;
      case 8: {
        if (tag == 64u) {
          set_has_gain();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gain_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:R2T2GuiProto.R2T2GuiMessageAnswer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:R2T2GuiProto.R2T2GuiMessageAnswer)
  return false;
#undef DO_
}

void R2T2GuiMessageAnswer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:R2T2GuiProto.R2T2GuiMessageAnswer)
  // optional .R2T2GuiProto.R2T2GuiMessageAnswer.Command command = 1;
  if (has_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->command(), output);
  }

  // optional bytes rxData = 2;
  if (has_rxdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->rxdata(), output);
  }

  // optional bytes fftData = 3;
  if (has_fftdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->fftdata(), output);
  }

  // optional uint32 txDataAck = 4;
  if (has_txdataack()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->txdataack(), output);
  }

  // optional double rssi = 5;
  if (has_rssi()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->rssi(), output);
  }

  // optional string version = 6;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "R2T2GuiProto.R2T2GuiMessageAnswer.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->version(), output);
  }

  // optional uint32 fftRate = 7;
  if (has_fftrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->fftrate(), output);
  }

  // optional int32 gain = 8;
  if (has_gain()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->gain(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:R2T2GuiProto.R2T2GuiMessageAnswer)
}

::google::protobuf::uint8* R2T2GuiMessageAnswer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:R2T2GuiProto.R2T2GuiMessageAnswer)
  // optional .R2T2GuiProto.R2T2GuiMessageAnswer.Command command = 1;
  if (has_command()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->command(), target);
  }

  // optional bytes rxData = 2;
  if (has_rxdata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->rxdata(), target);
  }

  // optional bytes fftData = 3;
  if (has_fftdata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->fftdata(), target);
  }

  // optional uint32 txDataAck = 4;
  if (has_txdataack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->txdataack(), target);
  }

  // optional double rssi = 5;
  if (has_rssi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->rssi(), target);
  }

  // optional string version = 6;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "R2T2GuiProto.R2T2GuiMessageAnswer.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->version(), target);
  }

  // optional uint32 fftRate = 7;
  if (has_fftrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->fftrate(), target);
  }

  // optional int32 gain = 8;
  if (has_gain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->gain(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:R2T2GuiProto.R2T2GuiMessageAnswer)
  return target;
}

size_t R2T2GuiMessageAnswer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:R2T2GuiProto.R2T2GuiMessageAnswer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes rxData = 2;
    if (has_rxdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->rxdata());
    }

    // optional bytes fftData = 3;
    if (has_fftdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->fftdata());
    }

    // optional string version = 6;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional .R2T2GuiProto.R2T2GuiMessageAnswer.Command command = 1;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->command());
    }

    // optional uint32 txDataAck = 4;
    if (has_txdataack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->txdataack());
    }

    // optional double rssi = 5;
    if (has_rssi()) {
      total_size += 1 + 8;
    }

    // optional uint32 fftRate = 7;
    if (has_fftrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fftrate());
    }

    // optional int32 gain = 8;
    if (has_gain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gain());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void R2T2GuiMessageAnswer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:R2T2GuiProto.R2T2GuiMessageAnswer)
  GOOGLE_DCHECK_NE(&from, this);
  const R2T2GuiMessageAnswer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const R2T2GuiMessageAnswer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:R2T2GuiProto.R2T2GuiMessageAnswer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:R2T2GuiProto.R2T2GuiMessageAnswer)
    MergeFrom(*source);
  }
}

void R2T2GuiMessageAnswer::MergeFrom(const R2T2GuiMessageAnswer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:R2T2GuiProto.R2T2GuiMessageAnswer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 255u) {
    if (from.has_rxdata()) {
      set_has_rxdata();
      rxdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rxdata_);
    }
    if (from.has_fftdata()) {
      set_has_fftdata();
      fftdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fftdata_);
    }
    if (from.has_version()) {
      set_has_version();
      version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
    }
    if (from.has_command()) {
      set_command(from.command());
    }
    if (from.has_txdataack()) {
      set_txdataack(from.txdataack());
    }
    if (from.has_rssi()) {
      set_rssi(from.rssi());
    }
    if (from.has_fftrate()) {
      set_fftrate(from.fftrate());
    }
    if (from.has_gain()) {
      set_gain(from.gain());
    }
  }
}

void R2T2GuiMessageAnswer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:R2T2GuiProto.R2T2GuiMessageAnswer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void R2T2GuiMessageAnswer::CopyFrom(const R2T2GuiMessageAnswer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:R2T2GuiProto.R2T2GuiMessageAnswer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool R2T2GuiMessageAnswer::IsInitialized() const {
  return true;
}

void R2T2GuiMessageAnswer::Swap(R2T2GuiMessageAnswer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void R2T2GuiMessageAnswer::InternalSwap(R2T2GuiMessageAnswer* other) {
  rxdata_.Swap(&other->rxdata_);
  fftdata_.Swap(&other->fftdata_);
  version_.Swap(&other->version_);
  std::swap(command_, other->command_);
  std::swap(txdataack_, other->txdataack_);
  std::swap(rssi_, other->rssi_);
  std::swap(fftrate_, other->fftrate_);
  std::swap(gain_, other->gain_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata R2T2GuiMessageAnswer::GetMetadata() const {
  protobuf_r2t2gui_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_r2t2gui_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// R2T2GuiMessageAnswer

// optional .R2T2GuiProto.R2T2GuiMessageAnswer.Command command = 1;
bool R2T2GuiMessageAnswer::has_command() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void R2T2GuiMessageAnswer::set_has_command() {
  _has_bits_[0] |= 0x00000008u;
}
void R2T2GuiMessageAnswer::clear_has_command() {
  _has_bits_[0] &= ~0x00000008u;
}
void R2T2GuiMessageAnswer::clear_command() {
  command_ = 0;
  clear_has_command();
}
::R2T2GuiProto::R2T2GuiMessageAnswer_Command R2T2GuiMessageAnswer::command() const {
  // @@protoc_insertion_point(field_get:R2T2GuiProto.R2T2GuiMessageAnswer.command)
  return static_cast< ::R2T2GuiProto::R2T2GuiMessageAnswer_Command >(command_);
}
void R2T2GuiMessageAnswer::set_command(::R2T2GuiProto::R2T2GuiMessageAnswer_Command value) {
  assert(::R2T2GuiProto::R2T2GuiMessageAnswer_Command_IsValid(value));
  set_has_command();
  command_ = value;
  // @@protoc_insertion_point(field_set:R2T2GuiProto.R2T2GuiMessageAnswer.command)
}

// optional bytes rxData = 2;
bool R2T2GuiMessageAnswer::has_rxdata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void R2T2GuiMessageAnswer::set_has_rxdata() {
  _has_bits_[0] |= 0x00000001u;
}
void R2T2GuiMessageAnswer::clear_has_rxdata() {
  _has_bits_[0] &= ~0x00000001u;
}
void R2T2GuiMessageAnswer::clear_rxdata() {
  rxdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rxdata();
}
const ::std::string& R2T2GuiMessageAnswer::rxdata() const {
  // @@protoc_insertion_point(field_get:R2T2GuiProto.R2T2GuiMessageAnswer.rxData)
  return rxdata_.GetNoArena();
}
void R2T2GuiMessageAnswer::set_rxdata(const ::std::string& value) {
  set_has_rxdata();
  rxdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:R2T2GuiProto.R2T2GuiMessageAnswer.rxData)
}
#if LANG_CXX11
void R2T2GuiMessageAnswer::set_rxdata(::std::string&& value) {
  set_has_rxdata();
  rxdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:R2T2GuiProto.R2T2GuiMessageAnswer.rxData)
}
#endif
void R2T2GuiMessageAnswer::set_rxdata(const char* value) {
  set_has_rxdata();
  rxdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:R2T2GuiProto.R2T2GuiMessageAnswer.rxData)
}
void R2T2GuiMessageAnswer::set_rxdata(const void* value, size_t size) {
  set_has_rxdata();
  rxdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:R2T2GuiProto.R2T2GuiMessageAnswer.rxData)
}
::std::string* R2T2GuiMessageAnswer::mutable_rxdata() {
  set_has_rxdata();
  // @@protoc_insertion_point(field_mutable:R2T2GuiProto.R2T2GuiMessageAnswer.rxData)
  return rxdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* R2T2GuiMessageAnswer::release_rxdata() {
  // @@protoc_insertion_point(field_release:R2T2GuiProto.R2T2GuiMessageAnswer.rxData)
  clear_has_rxdata();
  return rxdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void R2T2GuiMessageAnswer::set_allocated_rxdata(::std::string* rxdata) {
  if (rxdata != NULL) {
    set_has_rxdata();
  } else {
    clear_has_rxdata();
  }
  rxdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rxdata);
  // @@protoc_insertion_point(field_set_allocated:R2T2GuiProto.R2T2GuiMessageAnswer.rxData)
}

// optional bytes fftData = 3;
bool R2T2GuiMessageAnswer::has_fftdata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void R2T2GuiMessageAnswer::set_has_fftdata() {
  _has_bits_[0] |= 0x00000002u;
}
void R2T2GuiMessageAnswer::clear_has_fftdata() {
  _has_bits_[0] &= ~0x00000002u;
}
void R2T2GuiMessageAnswer::clear_fftdata() {
  fftdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fftdata();
}
const ::std::string& R2T2GuiMessageAnswer::fftdata() const {
  // @@protoc_insertion_point(field_get:R2T2GuiProto.R2T2GuiMessageAnswer.fftData)
  return fftdata_.GetNoArena();
}
void R2T2GuiMessageAnswer::set_fftdata(const ::std::string& value) {
  set_has_fftdata();
  fftdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:R2T2GuiProto.R2T2GuiMessageAnswer.fftData)
}
#if LANG_CXX11
void R2T2GuiMessageAnswer::set_fftdata(::std::string&& value) {
  set_has_fftdata();
  fftdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:R2T2GuiProto.R2T2GuiMessageAnswer.fftData)
}
#endif
void R2T2GuiMessageAnswer::set_fftdata(const char* value) {
  set_has_fftdata();
  fftdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:R2T2GuiProto.R2T2GuiMessageAnswer.fftData)
}
void R2T2GuiMessageAnswer::set_fftdata(const void* value, size_t size) {
  set_has_fftdata();
  fftdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:R2T2GuiProto.R2T2GuiMessageAnswer.fftData)
}
::std::string* R2T2GuiMessageAnswer::mutable_fftdata() {
  set_has_fftdata();
  // @@protoc_insertion_point(field_mutable:R2T2GuiProto.R2T2GuiMessageAnswer.fftData)
  return fftdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* R2T2GuiMessageAnswer::release_fftdata() {
  // @@protoc_insertion_point(field_release:R2T2GuiProto.R2T2GuiMessageAnswer.fftData)
  clear_has_fftdata();
  return fftdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void R2T2GuiMessageAnswer::set_allocated_fftdata(::std::string* fftdata) {
  if (fftdata != NULL) {
    set_has_fftdata();
  } else {
    clear_has_fftdata();
  }
  fftdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fftdata);
  // @@protoc_insertion_point(field_set_allocated:R2T2GuiProto.R2T2GuiMessageAnswer.fftData)
}

// optional uint32 txDataAck = 4;
bool R2T2GuiMessageAnswer::has_txdataack() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void R2T2GuiMessageAnswer::set_has_txdataack() {
  _has_bits_[0] |= 0x00000010u;
}
void R2T2GuiMessageAnswer::clear_has_txdataack() {
  _has_bits_[0] &= ~0x00000010u;
}
void R2T2GuiMessageAnswer::clear_txdataack() {
  txdataack_ = 0u;
  clear_has_txdataack();
}
::google::protobuf::uint32 R2T2GuiMessageAnswer::txdataack() const {
  // @@protoc_insertion_point(field_get:R2T2GuiProto.R2T2GuiMessageAnswer.txDataAck)
  return txdataack_;
}
void R2T2GuiMessageAnswer::set_txdataack(::google::protobuf::uint32 value) {
  set_has_txdataack();
  txdataack_ = value;
  // @@protoc_insertion_point(field_set:R2T2GuiProto.R2T2GuiMessageAnswer.txDataAck)
}

// optional double rssi = 5;
bool R2T2GuiMessageAnswer::has_rssi() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void R2T2GuiMessageAnswer::set_has_rssi() {
  _has_bits_[0] |= 0x00000020u;
}
void R2T2GuiMessageAnswer::clear_has_rssi() {
  _has_bits_[0] &= ~0x00000020u;
}
void R2T2GuiMessageAnswer::clear_rssi() {
  rssi_ = 0;
  clear_has_rssi();
}
double R2T2GuiMessageAnswer::rssi() const {
  // @@protoc_insertion_point(field_get:R2T2GuiProto.R2T2GuiMessageAnswer.rssi)
  return rssi_;
}
void R2T2GuiMessageAnswer::set_rssi(double value) {
  set_has_rssi();
  rssi_ = value;
  // @@protoc_insertion_point(field_set:R2T2GuiProto.R2T2GuiMessageAnswer.rssi)
}

// optional string version = 6;
bool R2T2GuiMessageAnswer::has_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void R2T2GuiMessageAnswer::set_has_version() {
  _has_bits_[0] |= 0x00000004u;
}
void R2T2GuiMessageAnswer::clear_has_version() {
  _has_bits_[0] &= ~0x00000004u;
}
void R2T2GuiMessageAnswer::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_version();
}
const ::std::string& R2T2GuiMessageAnswer::version() const {
  // @@protoc_insertion_point(field_get:R2T2GuiProto.R2T2GuiMessageAnswer.version)
  return version_.GetNoArena();
}
void R2T2GuiMessageAnswer::set_version(const ::std::string& value) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:R2T2GuiProto.R2T2GuiMessageAnswer.version)
}
#if LANG_CXX11
void R2T2GuiMessageAnswer::set_version(::std::string&& value) {
  set_has_version();
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:R2T2GuiProto.R2T2GuiMessageAnswer.version)
}
#endif
void R2T2GuiMessageAnswer::set_version(const char* value) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:R2T2GuiProto.R2T2GuiMessageAnswer.version)
}
void R2T2GuiMessageAnswer::set_version(const char* value, size_t size) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:R2T2GuiProto.R2T2GuiMessageAnswer.version)
}
::std::string* R2T2GuiMessageAnswer::mutable_version() {
  set_has_version();
  // @@protoc_insertion_point(field_mutable:R2T2GuiProto.R2T2GuiMessageAnswer.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* R2T2GuiMessageAnswer::release_version() {
  // @@protoc_insertion_point(field_release:R2T2GuiProto.R2T2GuiMessageAnswer.version)
  clear_has_version();
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void R2T2GuiMessageAnswer::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    set_has_version();
  } else {
    clear_has_version();
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:R2T2GuiProto.R2T2GuiMessageAnswer.version)
}

// optional uint32 fftRate = 7;
bool R2T2GuiMessageAnswer::has_fftrate() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void R2T2GuiMessageAnswer::set_has_fftrate() {
  _has_bits_[0] |= 0x00000040u;
}
void R2T2GuiMessageAnswer::clear_has_fftrate() {
  _has_bits_[0] &= ~0x00000040u;
}
void R2T2GuiMessageAnswer::clear_fftrate() {
  fftrate_ = 0u;
  clear_has_fftrate();
}
::google::protobuf::uint32 R2T2GuiMessageAnswer::fftrate() const {
  // @@protoc_insertion_point(field_get:R2T2GuiProto.R2T2GuiMessageAnswer.fftRate)
  return fftrate_;
}
void R2T2GuiMessageAnswer::set_fftrate(::google::protobuf::uint32 value) {
  set_has_fftrate();
  fftrate_ = value;
  // @@protoc_insertion_point(field_set:R2T2GuiProto.R2T2GuiMessageAnswer.fftRate)
}

// optional int32 gain = 8;
bool R2T2GuiMessageAnswer::has_gain() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void R2T2GuiMessageAnswer::set_has_gain() {
  _has_bits_[0] |= 0x00000080u;
}
void R2T2GuiMessageAnswer::clear_has_gain() {
  _has_bits_[0] &= ~0x00000080u;
}
void R2T2GuiMessageAnswer::clear_gain() {
  gain_ = 0;
  clear_has_gain();
}
::google::protobuf::int32 R2T2GuiMessageAnswer::gain() const {
  // @@protoc_insertion_point(field_get:R2T2GuiProto.R2T2GuiMessageAnswer.gain)
  return gain_;
}
void R2T2GuiMessageAnswer::set_gain(::google::protobuf::int32 value) {
  set_has_gain();
  gain_ = value;
  // @@protoc_insertion_point(field_set:R2T2GuiProto.R2T2GuiMessageAnswer.gain)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace R2T2GuiProto

// @@protoc_insertion_point(global_scope)
